const fs = require('fs');
const path = require('path');

// Data catalogue directory
const cataloguePath = path.join(__dirname, '..', 'data-catalogue');

// Output file paths
const outputJSPath = path.join(__dirname, 'catalogue-index.js');
const outputDTSPath = path.join(__dirname, 'catalogue-index.d.ts');

/**
 * Indexes all JSON files in the data catalogue directory
 * and generates a single JS module with the data and a corresponding d.ts file.
 */
function indexCatalogueFiles() {
  try {
    const files = fs.readdirSync(cataloguePath).filter(file => file.endsWith('.json'));
    console.log(`Found ${files.length} JSON files in data-catalogue.`);
    
    const catalogueIndex = [];
    const categories = new Set();
    const geographies = new Set();
    const frequencies = new Set();
    const demographies = new Set();
    const dataSources = new Set();

    for (const file of files) {
      try {
        const metadata = JSON.parse(fs.readFileSync(path.join(cataloguePath, file), 'utf8'));
        
        const dataset = {
          id: metadata.id || file.replace('.json', ''),
          title_en: metadata.title_en || '',
          title_ms: metadata.title_ms || '',
          description_en: metadata.description_en || '',
          description_ms: metadata.description_ms || '',
          frequency: metadata.frequency || '',
          geography: metadata.geography || [],
          demography: metadata.demography || [],
          dataset_begin: metadata.dataset_begin || null,
          dataset_end: metadata.dataset_end || null,
          data_source: metadata.data_source || [],
          data_as_of: metadata.data_as_of || '',
          last_updated: metadata.last_updated || '',
          next_update: metadata.next_update || '',
          link_parquet: metadata.link_parquet || '',
          link_csv: metadata.link_csv || '',
          link_preview: metadata.link_preview || '',
          site_category: metadata.site_category || []
        };

        catalogueIndex.push(dataset);

        // Collect filter values
        if (dataset.frequency) frequencies.add(dataset.frequency);
        dataset.geography.forEach(g => geographies.add(g));
        dataset.demography.forEach(d => demographies.add(d));
        dataset.data_source.forEach(s => dataSources.add(s));
        dataset.site_category.forEach(sc => {
          if (sc.category_en) categories.add(sc.category_en);
          if (sc.subcategory_en) categories.add(sc.subcategory_en);
        });

      } catch (e) {
        console.error(`Skipping invalid JSON file: ${file}`, e);
      }
    }
    
    catalogueIndex.sort((a, b) => a.id.localeCompare(b.id));
    
    const filters = {
      categories: Array.from(categories).sort(),
      geographies: Array.from(geographies).sort(),
      frequencies: Array.from(frequencies).sort(),
      demographies: Array.from(demographies).sort(),
      dataSources: Array.from(dataSources).sort()
    };
    
    const jsContent = `// Generated from local data catalogue files\n// Timestamp: ${new Date().toISOString()}\n// Total datasets: ${catalogueIndex.length}\n\nexport const CATALOGUE_INDEX = ${JSON.stringify(catalogueIndex, null, 2)};\n\nexport const CATALOGUE_FILTERS = ${JSON.stringify(filters, null, 2)};`;

    const dtsContent = `// Generated by scripts/index-catalogue-files.js on ${new Date().toISOString()}\n\ndeclare module '../scripts/catalogue-index.js' {\n  export interface SiteCategory {\n    site: string;\n    category_en: string;\n    category_ms: string;\n    category_sort: number;\n    subcategory_en: string;\n    subcategory_ms: string;\n    subcategory_sort: number;\n  }\n\n  export interface DatasetMetadata {\n    id: string;\n    title_en: string;\n    title_ms: string;\n    description_en: string;\n    description_ms: string;\n    frequency: string;\n    geography: string[];\n    demography: string[];\n    dataset_begin: number | null;\n    dataset_end: number | null;\n    data_source: string[];\n    data_as_of: string;\n    last_updated: string;\n    next_update: string;\n    link_parquet: string;\n    link_csv: string;\n    link_preview: string;\n    site_category: SiteCategory[];\n  }\n\n  export interface CatalogueFilters {\n    categories: string[];\n    geographies: string[];\n    frequencies: string[];\n    demographies: string[];\n    dataSources: string[];\n  }\n\n  export const CATALOGUE_INDEX: DatasetMetadata[];\n  export const CATALOGUE_FILTERS: CatalogueFilters;\n}`;

    fs.writeFileSync(outputJSPath, jsContent);
    fs.writeFileSync(outputDTSPath, dtsContent);
    console.log(`Successfully indexed ${catalogueIndex.length} datasets to catalogue-index.js and catalogue-index.d.ts`);
  
  } catch (error) {
    console.error('Error indexing catalogue files:', error);
    throw error;
  }
}

// Run the indexing
indexCatalogueFiles();
